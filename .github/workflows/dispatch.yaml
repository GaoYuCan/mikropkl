
name: Dispatch Build
permissions: write-all

on:
  workflow_dispatch:
    inputs:
      version:
        default: "stable"
        type: string
        description: 'RouterOS Version or Channel'
        required: true
      pklversion:
        default: "0.28.1"
        type: string
        description: 'pkl Version'
        required: true
      makefileflags:
        default: "-d"
        type: string
        description: 'Makefile options'
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      machines: ${{ steps.outputdirs.outputs.built }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install packages into building machine
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip qemu-utils rsync gdisk dosfstools parted genisoimage zip make
      - name: Intall Apple pkl-lang
        run: |
          curl -L -o pkl 'https://github.com/apple/pkl/releases/download/${{ github.event.inputs.pklversion }}/pkl-linux-amd64'
          chmod +x pkl
          ./pkl --version
          cp ./pkl /usr/local/bin
      - name: Set RouterOS version, based on dispatch_workflow version
        run: |
          echo "ROSVER=${{ github.event.inputs.version }}" >> $GITHUB_ENV
      - name: Verify RouterOS version
        run: |
          echo "Build using $ROSVER"  
      - name: Build using Makefile
        id: make
        run: |
          make ${{ github.event.inputs.makefileflags }}
      - name: Store /Machines directory .utm machines built, for the "dynamic matrix of artifacts"
        id: outputdirs
        run: |
          echo built=$(ls Machines | jq -R -s -c 'split("\n")[:-1]') >> "$GITHUB_OUTPUT"
      - name: Produce Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Machines
          path: ./Machines
      - name: Verify RouterOS version
        run: |
          echo "Build using $ROSVER"  
  fossilize:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        machine: ${{ fromJSON(needs.build.outputs.machines) }}
    steps:
      - run: ls -l
      - name: Get all machines
        uses: actions/download-artifact@v4
        with:
          name: Machines
      - run: ls -l
      - id: rename
        run: |
          echo dashedname=${{ matrix.machine}} >> "$GITHUB_OUTPUT"
      - name: Add individual machine
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.rename.outputs.dashedname }}.zip
          path: ${{ matrix.machine }}

